#!/bin/bash
# staarpipelinesummary_varset_v0.9.6
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of outfile: '$outfile'"
    echo "Value of test_type: '$test_type'"
    echo "Value of infiles: '${infiles[@]}'"
    echo "Value of infile_prefix: '$infile_prefix'"
    echo "Value of known_varlist_rsID: '$known_varlist_rsID'"
    echo "Value of known_varlist_4columns: '$known_varlist_4columns'"
    echo "Value of nullobj_file: '$nullobj_file'"
    echo "Value of agds_files: '${agds_files[@]}'"
    echo "Value of agds_file_name: '$agds_file_name'"
    echo "Value of annotation_name_catalog_file: '$annotation_name_catalog_file'"
    echo "Value of max_maf: '$max_maf'"
    echo "Value of use_stepwise_selection: '$use_stepwise_selection'"
    echo "Value of min_maf_adj: '$min_maf_adj'"
    echo "Value of qc_label_dir: '$qc_label_dir'"
    echo "Value of variant_type: '$variant_type'"
    echo "Value of geno_missing_imputation: '$geno_missing_imputation'"
    echo "Value of annotation_dir: '$annotation_dir'"
    echo "Value of use_annotation_weights: '$use_annotation_weights'"
    echo "Value of annotation_name: '$annotation_name'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    for i in ${!infiles[@]}
    do
        dx download "${infiles[$i]}" &
    done
    if [ -n "$known_varlist_rsID" ]
    then
        dx download "$known_varlist_rsID" -o known_varlist_rsID &
    known_varlist_rsID2="known_varlist_rsID"
    else
    known_varlist_rsID2="NO_KNOWN_VARLIST_RSID"
    fi
    if [ -n "$known_varlist_4columns" ]
    then
        dx download "$known_varlist_4columns" -o known_varlist_4columns &
    known_varlist_4columns2="known_varlist_4columns"
    else
    known_varlist_4columns2="NO_KNOWN_VARLIST_4COLUMNS"
    fi
    if [ -n "$nullobj_file" ]
    then
        dx download "$nullobj_file" -o nullobj_file &
    nullobj_file2="nullobj_file"
    for i in ${!agds_files[@]}
    do
        dx download "${agds_files[$i]}" &
    done
    else
    nullobj_file2="NO_NULL_OBJ"
    fi
    if [ -n "$annotation_name_catalog_file" ]
    then
        dx download "$annotation_name_catalog_file" -o annotation_name_catalog_file &
    annotation_name_catalog_file2="annotation_name_catalog_file"
    else
    annotation_name_catalog_file2="NO_ANNOTATION_NAME_CATALOG_FILE"
    fi

    echo "Rscript --vanilla staarpipelinesummary_varset.R $outfile $test_type $infile_prefix $known_varlist_rsID2 $known_varlist_4columns2 $nullobj_file2 $agds_file_name $annotation_name_catalog_file2 $max_maf $use_stepwise_selection $min_maf_adj $qc_label_dir $variant_type $geno_missing_imputation $annotation_dir $use_annotation_weights $annotation_name"
    dx-docker run -v /home/dnanexus/:/home/dnanexus/ -w /home/dnanexus/ zilinli/staarpipeline:0.9.6 Rscript --vanilla staarpipelinesummary_varset.R $outfile $test_type $infile_prefix $known_varlist_rsID2 $known_varlist_4columns2 $nullobj_file2 $agds_file_name $annotation_name_catalog_file2 $max_maf $use_stepwise_selection $min_maf_adj $qc_label_dir $variant_type $geno_missing_imputation $annotation_dir $use_annotation_weights $annotation_name
    mkdir -p out/results
    if [ "$test_type" == "Single" ] ; then 
    mv ${outfile}_results_single_genome.Rdata out/results
    mv ${outfile}_results_single_genome_sig.csv out/results
    elif [ "$test_type" == "Gene_Centric_Coding" ] ; then
    mv ${outfile}_results_plof_genome.Rdata out/results
    mv ${outfile}_results_plof_genome_sig.csv out/results

    mv ${outfile}_results_plof_ds_genome.Rdata out/results
    mv ${outfile}_results_plof_ds_genome_sig.csv out/results

    mv ${outfile}_results_missense_genome.Rdata out/results
    mv ${outfile}_results_missense_genome_sig.csv out/results

    mv ${outfile}_results_disruptive_missense_genome.Rdata out/results
    mv ${outfile}_results_disruptive_missense_genome_sig.csv out/results

    mv ${outfile}_results_synonymous_genome.Rdata out/results
    mv ${outfile}_results_synonymous_genome_sig.csv out/results

    mv ${outfile}_results_coding_genome_sig.csv out/results
    elif [ "$test_type" == "Gene_Centric_Noncoding" ] ; then
    mv ${outfile}_results_UTR_genome.Rdata out/results
    mv ${outfile}_results_UTR_genome_sig.csv out/results

    mv ${outfile}_results_upstream_genome.Rdata out/results
    mv ${outfile}_results_upstream_genome_sig.csv out/results

    mv ${outfile}_results_downstream_genome.Rdata out/results
    mv ${outfile}_results_downstream_genome_sig.csv out/results

    mv ${outfile}_results_promoter_CAGE_genome.Rdata out/results
    mv ${outfile}_results_promoter_CAGE_genome_sig.csv out/results

    mv ${outfile}_results_promoter_DHS_genome.Rdata out/results
    mv ${outfile}_results_promoter_DHS_genome_sig.csv out/results

    mv ${outfile}_results_enhancer_CAGE_genome.Rdata out/results
    mv ${outfile}_results_enhancer_CAGE_genome_sig.csv out/results

    mv ${outfile}_results_enhancer_DHS_genome.Rdata out/results
    mv ${outfile}_results_enhancer_DHS_genome_sig.csv out/results

    mv ${outfile}_results_noncoding_genome_sig.csv out/results
    elif [ "$test_type" == "ncRNA" ] ; then
    mv ${outfile}_results_ncRNA_genome.Rdata out/results
    mv ${outfile}_results_ncRNA_genome_sig.csv out/results
    elif [ "$test_type" == "Sliding_Window" ] ; then
    mv ${outfile}_results_sliding_window_genome.Rdata out/results
    mv ${outfile}_results_sliding_window_genome_sig.csv out/results
    fi
    if [ -n "$nullobj_file" ]
    then
        mv ${outfile}_known_loci_genome.csv out/results
    if [ "$test_type" == "Gene_Centric_Coding" ] ; then
    mv ${outfile}_results_plof_genome_sig_cond.csv out/results
    mv ${outfile}_results_plof_ds_genome_sig_cond.csv out/results
    mv ${outfile}_results_missense_genome_sig_cond.csv out/results
    mv ${outfile}_results_disruptive_missense_genome_sig_cond.csv out/results
    mv ${outfile}_results_synonymous_genome_sig_cond.csv out/results
    mv ${outfile}_results_coding_genome_sig_cond.csv out/results
    elif [ "$test_type" == "Gene_Centric_Noncoding" ] ; then
    mv ${outfile}_results_UTR_genome_sig_cond.csv out/results
    mv ${outfile}_results_upstream_genome_sig_cond.csv out/results
    mv ${outfile}_results_downstream_genome_sig_cond.csv out/results
    mv ${outfile}_results_promoter_CAGE_genome_sig_cond.csv out/results
    mv ${outfile}_results_promoter_DHS_genome_sig_cond.csv out/results
    mv ${outfile}_results_enhancer_CAGE_genome_sig_cond.csv out/results
    mv ${outfile}_results_enhancer_DHS_genome_sig_cond.csv out/results
    mv ${outfile}_results_noncoding_genome_sig_cond.csv out/results
    elif [ "$test_type" == "ncRNA" ] ; then
    mv ${outfile}_results_ncRNA_genome_sig_cond.csv out/results
    elif [ "$test_type" == "Sliding_Window" ] ; then
    mv ${outfile}_results_sliding_window_genome_sig_cond.csv out/results
    fi
    fi
    dx-upload-all-outputs
}

